[75. [1110] Delete Nodes And Return Forest – delete given node, and return roots of every subtrees.]
- I solved this problme using bottom-up approach.
- First at all, using postorder search and if a current node has to be deleted, insert their children into answer vector, and come back to parents node, finally delete the node.
- but the point is how I can handle the original root node, value 1, because of that, I have to use another find function whether the to_delete vector has 1 or not. so it cunsume pretty much time I think.
- Tommrow I will revise this algorithm.
public:
    TreeNode* helper(TreeNode* root,vector<TreeNode*>& answer, vector<int>& to_delete){
        if(!root) return nullptr;
        TreeNode* left=nullptr;
        TreeNode* right=nullptr;
        left=helper(root->left,answer,to_delete);
        right=helper(root->right,answer,to_delete);
        if(left) root->left=nullptr;
        if(right) root->right=nullptr;
        for(int i=0;i<to_delete.size();i++){
            if(to_delete[i]==root->val){
                if(root->left) answer.push_back(root->left);
                if(root->right) answer.push_back(root->right);
                //to_delete.erase(to_delete.begin()+i);
                return root;
            }
        }
        return nullptr;
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> answer; 
        helper(root,answer,to_delete);
        if(find(to_delete.begin(),to_delete.end(),1)==to_delete.end()) answer.push_back(root);
        return answer;
    }
};
